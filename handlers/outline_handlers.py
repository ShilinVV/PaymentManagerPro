import os
import uuid
import logging
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import VPN_PLANS, ADMIN_IDS
from services.database_service_sql import (
    get_user, create_user, update_user, get_all_users,
    get_subscription, create_subscription, update_subscription, get_user_subscriptions,
    get_active_subscription, get_expiring_subscriptions,
    get_user_access_keys, create_access_key, get_access_key, update_access_key,
    get_payment, create_payment, update_payment
)
from services.outline_service import OutlineService
from utils.helpers import format_bytes, format_expiry_date, calculate_expiry

# Initialize Outline service
outline_service = OutlineService()

async def ensure_user_exists(user):
    """Ensure user exists in database, create if not"""
    if not user:
        return
    
    # Check if user exists
    db_user = await get_user(user.id)
    
    if not db_user:
        # Create new user
        user_data = {
            "telegram_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "created_at": datetime.now()
        }
        await create_user(user_data)

async def create_vpn_access(user_id, subscription_id, plan_id, days, name=None):
    """Create VPN access key and save to database"""
    # Create key with Outline API
    outline_key = await outline_service.create_key_with_expiration(days, name)
    
    if not outline_key:
        return None
    
    # Save key to database
    key_data = {
        "key_id": outline_key.get("id"),
        "name": name or f"VPN Key {datetime.now().strftime('%Y-%m-%d')}",
        "access_url": outline_key.get("accessUrl"),
        "user_id": user_id,
        "subscription_id": subscription_id,
        "created_at": datetime.now()
    }
    
    new_key = await create_access_key(key_data)
    return new_key
    
async def extend_vpn_access(key_id, user_id, subscription_id, plan_id, days, name=None):
    """Extend existing VPN key instead of creating a new one"""
    # Get access key from database
    key = await get_access_key(key_id)
    if not key:
        logging.error(f"Key {key_id} not found for extension")
        return None
    
    # Extend key with Outline API
    outline_key = await outline_service.extend_key_expiration(key_id, days, name)
    
    if not outline_key or "error" in outline_key:
        logging.error(f"Failed to extend key {key_id}: {outline_key.get('error', 'Unknown error')}")
        return None
    
    # Calculate new expiry date
    expires_at = calculate_expiry(days)
    
    # Update key in database
    update_data = {
        "subscription_id": subscription_id,
        "updated_at": datetime.now(),
        "expires_at": expires_at
    }
    
    # Update the key and return the updated record
    await update_access_key(key_id, update_data)
    
    # Get the updated key
    updated_key = await get_access_key(key_id)
    return updated_key

async def get_user_active_keys(user_id):
    """Get all active (non-deleted) keys for a user"""
    try:
        # Get all keys for the user
        all_keys = await get_user_access_keys(user_id)
        
        # Filter out deleted keys (–¥–ª—è SQLAlchemy –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É)
        active_keys = [k for k in all_keys if not (getattr(k, 'deleted', False))]
        
        return active_keys
    except Exception as e:
        logging.error(f"Error getting user active keys: {e}")
        return []

async def check_subscription_expiry():
    """Check for expiring subscriptions and notify users"""
    # Get subscriptions expiring in 1 day
    expiring_subscriptions = await get_expiring_subscriptions(1)
    
    if not expiring_subscriptions:
        return
    
    # Process each expiring subscription
    logging.info(f"Found {len(expiring_subscriptions)} expiring subscriptions")
    # Implementation depends on notification mechanism

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    # Welcome message
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
        f"–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É VPN —Å–µ—Ä–≤–∏—Å—É.\n\n"
        f"*–ß—Ç–æ —è —É–º–µ—é:*\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
        f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # Get active subscription
    subscription = await get_active_subscription(user.id)
    
    # Prepare keyboard based on subscription status
    keyboard = []
    
    if subscription:
        # User has active subscription
        keyboard = [
            [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="plans")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
        ]
    else:
        # User hasn't used test period yet
        db_user = await get_user(user.id)
        test_used = False
        if db_user:
            if isinstance(db_user, dict):
                test_used = db_user.get("test_used", False)
            else:
                test_used = getattr(db_user, "test_used", False)
            
        if not test_used:
            keyboard = [
                [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="test_period")],
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
    
    # Add admin button if user is admin
    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /status command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    # Get active subscription
    subscription = await get_active_subscription(user.id)
    
    if not subscription:
        # No active subscription
        message = (
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
        return
    
    # Get plan details
    plan_id = subscription.get("plan_id")
    plan = VPN_PLANS.get(plan_id, {})
    
    # Get access keys for this subscription
    subscription_id = subscription.get("_id")
    access_keys = await get_user_access_keys(user.id)
    
    # Filter keys for current subscription
    valid_keys = [key for key in access_keys if str(key.get("subscription_id")) == str(subscription_id)]
    
    # Format expiry date
    expires_at = subscription.get("expires_at")
    expiry_str = format_expiry_date(expires_at) if expires_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    message = (
        f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n"
        f"*–ü–ª–∞–Ω:* {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"*–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n"
        f"*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiry_str}\n"
        f"*–î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {plan.get('devices', 1)}\n"
        f"*–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {len(valid_keys)}\n\n"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="plans")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="plans")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /plans command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
    
    # Get test plan
    test_plan = VPN_PLANS.get("test", {})
    
    # Display test plan first (if available)
    if test_plan:
        message += (
            f"*{test_plan.get('name', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥')}*\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ*\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {test_plan.get('duration', 3)} –¥–Ω—è\n"
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {test_plan.get('devices', 1)}\n"
            f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º VPN. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.\n\n"
        )
    
    # Add regular plans
    regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
    
    for plan_id, plan in regular_plans.items():
        discount = f" (—Å–∫–∏–¥–∫–∞ {plan.get('discount')})" if plan.get('discount') else ""
        message += (
            f"*{plan['name']}*{discount}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan['price']} —Ä—É–±.*\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {plan.get('devices', 1)}\n"
            f"{plan.get('description', '')}\n\n"
        )
    
    # Create keyboard with plan options
    keyboard = []
    
    # Check if user already used test period
    db_user = await get_user(user.id)
    test_used = False
    if db_user:
        if isinstance(db_user, dict):
            test_used = db_user.get("test_used", False)
        else:
            test_used = getattr(db_user, "test_used", False)
            
    # Add test plan button if not used yet
    if test_plan and not test_used:
        keyboard.append([InlineKeyboardButton(
            "üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", 
            callback_data="test_period"
        )])
        
    # Add regular plans
    for plan_id, plan in regular_plans.items():
        keyboard.append([InlineKeyboardButton(
            f"{plan['name']} - {plan['price']} —Ä—É–±.", 
            callback_data=f"buy_{plan_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /keys command - redirects to plans"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    # Always redirect to plans
    message = (
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ VPN –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ VPN."
    )
    
    # Get test plan
    test_plan = VPN_PLANS.get("test", {})
    
    # Check if user already used test period
    db_user = await get_user(user.id)
    test_used = False
    if db_user:
        if isinstance(db_user, dict):
            test_used = db_user.get("test_used", False)
        else:
            test_used = getattr(db_user, "test_used", False)
    
    # Create keyboard with plan options
    keyboard = []
    
    # Add test plan button if not used yet
    if test_plan and not test_used:
        keyboard.append([InlineKeyboardButton(
            "üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", 
            callback_data="test_period"
        )])
        
    # Add regular plans
    regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
    for plan_id, plan in regular_plans.items():
        keyboard.append([InlineKeyboardButton(
            f"{plan['name']} - {plan['price']} —Ä—É–±.", 
            callback_data=f"buy_{plan_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup
    )
    return

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    message = (
        "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:*\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç Outline:\n"
        "‚Ä¢ Android: [Google Play](https://play.google.com/store/apps/details?id=org.outline.android.client)\n"
        "‚Ä¢ iOS: [App Store](https://apps.apple.com/us/app/outline-app/id1356177741)\n"
        "‚Ä¢ Windows: [outline.vpn](https://getoutline.org/get-started/#step-3)\n"
        "‚Ä¢ macOS: [outline.vpn](https://getoutline.org/get-started/#step-3)\n"
        "‚Ä¢ Linux: [outline.vpn](https://getoutline.org/get-started/#step-3)\n\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞, –≤—ã–±—Ä–∞–≤ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.\n\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ –≤ –∫–ª–∏–µ–Ω—Ç–µ Outline.\n\n"
        "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'.\n\n"
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        "‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞).\n"
        "‚Ä¢ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
    )
    
    # Create keyboard
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
    if data.startswith("copy_key_"):
        callback_id = data
        access_url = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if hasattr(context, 'user_data') and callback_id in context.user_data:
            access_url = context.user_data[callback_id]
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if access_url:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
            await query.answer("–ö–ª—é—á –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=user.id,
                text=f"`{access_url}`",
                parse_mode="Markdown"
            )
            return
        else:
            await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.")
            return
    
    # Admin panel button
    if data == "admin":
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return
    
    # Main menu navigation
    elif data == "back_to_main":
        # Simulate /start command but edit message instead of sending new one
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
            f"–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É VPN —Å–µ—Ä–≤–∏—Å—É.\n\n"
            f"*–ß—Ç–æ —è —É–º–µ—é:*\n"
            f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
            f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        # Check if user has active subscription
        subscription = await get_active_subscription(user.id)
        
        # Prepare keyboard based on subscription status
        keyboard = []
        
        if subscription:
            # User has active subscription
            keyboard = [
                [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="plans")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
        else:
            # User hasn't used test period yet
            db_user = await get_user(user.id)
            test_used = False
            if db_user:
                if isinstance(db_user, dict):
                    # MongoDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                    test_used = db_user.get("test_used", False)
                else:
                    # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
                    test_used = getattr(db_user, "test_used", False)
            
            if not test_used:
                keyboard = [
                    [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="test_period")],
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
                ]
        
        # Add admin button if user is admin
        if user.id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Status callback
    elif data == "status":
        # Get active subscription
        subscription = await get_active_subscription(user.id)
        
        if not subscription:
            # No active subscription
            message = (
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        # Get plan details
        plan_id = ""
        subscription_id = ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ë–î
        if isinstance(subscription, dict):
            # MongoDB
            plan_id = subscription.get("plan_id", "")
            subscription_id = subscription.get("_id", "")
        else:
            # SQLAlchemy
            plan_id = getattr(subscription, "plan_id", "")
            subscription_id = getattr(subscription, "id", "")
            
        plan = VPN_PLANS.get(plan_id, {})
        
        # Get access keys for this user
        access_keys = await get_user_access_keys(user.id)
        
        # Filter keys for current subscription
        valid_keys = []
        for key in access_keys:
            key_subscription_id = ""
            if isinstance(key, dict):
                key_subscription_id = str(key.get("subscription_id", ""))
            else:
                key_subscription_id = str(getattr(key, "subscription_id", ""))
                
            if key_subscription_id == str(subscription_id):
                valid_keys.append(key)
        
        # Format expiry date
        expires_at = None
        if isinstance(subscription, dict):
            expires_at = subscription.get("expires_at")
        else:
            expires_at = getattr(subscription, "expires_at", None)
            
        expiry_str = format_expiry_date(expires_at) if expires_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        message = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n"
            f"*–ü–ª–∞–Ω:* {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"*–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiry_str}\n"
            f"*–î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {plan.get('devices', 1)}\n"
            f"*–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {len(valid_keys)}\n\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="plans")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return

    # Test period
    elif data == "test_period":
        # Make sure user exists in database
        db_user = await get_user(user.id)
        
        # Create user if not exists
        if not db_user:
            user_data = {
                "telegram_id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "created_at": datetime.now(),
                "test_used": False
            }
            db_user = await create_user(user_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        test_used = False
        if db_user:
            if isinstance(db_user, dict):
                # MongoDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                test_used = db_user.get("test_used", False)
            else:
                # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
                test_used = getattr(db_user, "test_used", False)
        
        if test_used:
            message = (
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        # Get test plan
        test_plan = VPN_PLANS.get("test")
        if not test_plan:
            await query.edit_message_text(
                "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        import uuid
        subscription_id = str(uuid.uuid4())
        
        # Create subscription
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_db_id = None
        if isinstance(db_user, dict):
            # MongoDB
            user_db_id = db_user.get("_id", user.id)
        else:
            # SQLAlchemy
            user_db_id = getattr(db_user, "id", None)
            
        if not user_db_id:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
            
        subscription_data = {
            "user_id": user_db_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏–∑ Telegram
            "subscription_id": subscription_id,
            "plan_id": "test",
            "status": "active",
            "created_at": datetime.now(),
            "expires_at": datetime.now() + timedelta(days=test_plan["duration"]),
            "price_paid": 0
        }
        
        new_subscription = await create_subscription(subscription_data)
        
        if not new_subscription:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î)
        if isinstance(new_subscription, dict):
            # MongoDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            subscription_id = new_subscription.get("_id", subscription_id)
        else:
            # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç
            subscription_id = getattr(new_subscription, "id", subscription_id)
        
        # Create VPN access key
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ duration - —ç—Ç–æ —á–∏—Å–ª–æ
        duration_days = test_plan["duration"]
        if not isinstance(duration_days, int):
            duration_days = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ
            
        key = await create_vpn_access(
            user_db_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏–∑ Telegram 
            subscription_id, 
            "test", 
            duration_days, 
            f"Test - {user.first_name}"
        )
        
        if not key:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Mark test period as used
        await update_user(user.id, {"test_used": True})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if db_user:
            if isinstance(db_user, dict):
                db_user["test_used"] = True
            else:
                db_user.test_used = True
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        expiry_date = datetime.now() + timedelta(days=test_plan["duration"])
        if isinstance(new_subscription, dict):
            expiry_date = new_subscription.get("expires_at", expiry_date)
        else:
            # SQLAlchemy –æ–±—ä–µ–∫—Ç
            expiry_date = getattr(new_subscription, "expires_at", expiry_date)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        expiry_str = format_expiry_date(expiry_date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º URL –∫–ª—é—á–∞
        access_url = ""
        if isinstance(key, dict):
            access_url = key.get("access_url", "")
        else:
            access_url = getattr(key, "access_url", "")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è callback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
        copy_key_callback = f"copy_key_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL-–∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        if not hasattr(context, 'user_data'):
            context.user_data = {}
        
        context.user_data[copy_key_callback] = access_url
        
        # Send success message with access key
        message = (
            f"*–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ {test_plan['duration']} –¥–Ω—è.\n\n"
            f"*–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n"
            f"`{access_url}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n"
            f"*–í–∞–∂–Ω–æ:* –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∫–ª—é—á –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.\n\n"
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –¥–æ {expiry_str}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data=copy_key_callback)],
            [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="help")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Plans callback
    elif data == "plans":
        message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
        
        # Get test plan
        test_plan = VPN_PLANS.get("test", {})
        
        # Display test plan first (if available)
        if test_plan:
            message += (
                f"*{test_plan.get('name', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥')}*\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ*\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {test_plan.get('duration', 3)} –¥–Ω—è\n"
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {test_plan.get('devices', 1)}\n"
                f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º VPN. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.\n\n"
            )
        
        # Add regular plans in order of duration (shortest to longest)
        regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
        
        # Sort by duration
        sorted_plans = sorted(regular_plans.items(), key=lambda x: x[1]['duration'])
        
        for plan_id, plan in sorted_plans:
            discount = f" (—Å–∫–∏–¥–∫–∞ {plan.get('discount')})" if plan.get('discount') else ""
            message += (
                f"*{plan['name']}*{discount}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan['price']} —Ä—É–±.*\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {plan.get('devices', 1)}\n"
                f"{plan.get('description', '')}\n\n"
            )
        
        # Create keyboard with plan options
        keyboard = []
        
        # Check if user already used test period
        db_user = await get_user(user.id)
        test_used = False
        if db_user:
            if isinstance(db_user, dict):
                test_used = db_user.get("test_used", False)
            else:
                test_used = getattr(db_user, "test_used", False)
                
        # Add test plan button if not used yet
        if test_plan and not test_used:
            keyboard.append([InlineKeyboardButton(
                "üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", 
                callback_data="test_period"
            )])
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sorted_plans = sorted(regular_plans.items(), key=lambda x: x[1]['duration'])
        
        # Add regular plans
        for plan_id, plan in sorted_plans:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            discount_text = f" (-{plan.get('discount')})" if plan.get('discount') else ""
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} - {plan['price']} —Ä—É–±.{discount_text}", 
                callback_data=f"buy_{plan_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
