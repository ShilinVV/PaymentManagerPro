import logging
import os
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import VPN_PLANS, ADMIN_IDS, EXPIRY_NOTIFICATION_DAYS
from services.outline_service import OutlineService
from services.database_service import (
    create_user, get_user, update_user, get_active_subscription,
    create_subscription, update_subscription, get_user_subscriptions,
    create_access_key, get_user_access_keys, get_access_key,
    update_access_key, get_expiring_subscriptions, get_subscription
)
from utils.helpers import format_bytes, format_expiry_date

# Configure logging
logger = logging.getLogger(__name__)

# Initialize Outline service
outline_service = OutlineService()

# Helper Functions

async def ensure_user_exists(user):
    """Ensure user exists in database, create if not"""
    telegram_id = user.id
    existing_user = await get_user(telegram_id)
    
    if not existing_user:
        # Create new user
        user_data = {
            "telegram_id": telegram_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "created_at": datetime.now(),
            "is_premium": False,
            "test_used": False
        }
        await create_user(user_data)
        logger.info(f"Created new user: {telegram_id}")
        return user_data
    return existing_user

async def create_vpn_access(user_id, subscription_id, plan_id, days, name=None):
    """Create VPN access key and save to database"""
    # Get plan details
    plan = VPN_PLANS.get(plan_id)
    if not plan:
        logger.error(f"Invalid plan ID: {plan_id}")
        return None
    
    # Create key with expiration in Outline VPN
    key_name = name or f"User {user_id}"
    key_data = await outline_service.create_key_with_expiration(days, key_name)
    
    if not key_data or (isinstance(key_data, dict) and "error" in key_data):
        error_msg = key_data.get("error", "Unknown error") if isinstance(key_data, dict) else "Failed to create key"
        logger.error(f"Failed to create Outline key: {error_msg}")
        return None
    
    # Save key to database
    access_key = {
        "user_id": user_id,
        "subscription_id": subscription_id,
        "key_id": key_data.get("id"),
        "name": key_data.get("name"),
        "access_url": key_data.get("accessUrl"),
        "created_at": datetime.now(),
        "deleted": False
    }
    
    try:
        saved_key = await create_access_key(access_key)
        logger.info(f"Created VPN access key for user {user_id}, subscription {subscription_id}")
        
        # –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ create_access_key –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ORM-–æ–±—ä–µ–∫—Ç
        if hasattr(saved_key, 'key_id') and not isinstance(saved_key, dict):
            return {
                "key_id": saved_key.key_id,
                "name": saved_key.name,
                "access_url": saved_key.access_url
            }
        return saved_key
    except Exception as e:
        logger.error(f"Failed to save access key to database: {e}")
        # –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        return {
            "key_id": key_data.get("id"),
            "name": key_data.get("name"),
            "access_url": key_data.get("accessUrl")
        }

async def check_subscription_expiry():
    """Check for expiring subscriptions and notify users"""
    try:
        # Get subscriptions expiring in the specified days
        expiring_subs = await get_expiring_subscriptions(EXPIRY_NOTIFICATION_DAYS)
        
        if not expiring_subs:
            logger.info("No expiring subscriptions found")
            return
        
        logger.info(f"Found {len(expiring_subs)} expiring subscriptions")
        
        # Send notification to each user
        for sub in expiring_subs:
            user_id = sub.get("user_id")
            expires_at = sub.get("expires_at")
            
            if not user_id or not expires_at:
                continue
                
            expiry_str = format_expiry_date(expires_at)
            plan_id = sub.get("plan_id")
            plan_name = VPN_PLANS.get(plan_id, {}).get("name", "VPN")
            
            message = (
                f"‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç* ‚ö†Ô∏è\n\n"
                f"–ü–ª–∞–Ω: *{plan_name}*\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: *{expiry_str}*\n\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
            )
            
            # Create keyboard with renewal options
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="plans")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                from telegram import Bot
                bot = Bot(token=os.environ.get("BOT_TOKEN"))
                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
                logger.info(f"Sent expiry notification to user {user_id}")
            except Exception as e:
                logger.error(f"Failed to send expiry notification to user {user_id}: {e}")
    
    except Exception as e:
        logger.error(f"Error checking subscription expiry: {e}")

# Command Handlers

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
        f"–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É VPN —Å–µ—Ä–≤–∏—Å—É.\n\n"
        f"*–ß—Ç–æ —è —É–º–µ—é:*\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
        f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # Check if user has active subscription
    subscription = await get_active_subscription(user.id)
    
    # Prepare keyboard based on subscription status
    keyboard = []
    
    if subscription:
        # User has active subscription
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
        ]
    else:
        # User hasn't used test period yet
        db_user = await get_user(user.id)
        test_used = db_user.get("test_used", False) if db_user else False
        
        if not test_used:
            keyboard = [
                [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="test_period")],
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
    
    # Add admin button if user is admin
    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /status command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    # Get active subscription
    subscription = await get_active_subscription(user.id)
    
    if not subscription:
        # No active subscription
        message = (
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
        return
    
    # Get plan details
    plan_id = subscription.get("plan_id")
    plan = VPN_PLANS.get(plan_id, {})
    
    # Get access keys for this subscription
    subscription_id = subscription.get("_id")
    access_keys = await get_user_access_keys(user.id)
    
    # Filter keys for current subscription
    valid_keys = [key for key in access_keys if str(key.get("subscription_id")) == str(subscription_id)]
    
    # Format expiry date
    expires_at = subscription.get("expires_at")
    expiry_str = format_expiry_date(expires_at) if expires_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    message = (
        f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n"
        f"*–ü–ª–∞–Ω:* {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"*–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n"
        f"*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiry_str}\n"
        f"*–î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {plan.get('devices', 1)}\n"
        f"*–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {len(valid_keys)}\n\n"
    )
    
    # Add access key information if available
    if valid_keys:
        message += "*–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:*\n\n"
        for i, key in enumerate(valid_keys, 1):
            key_name = key.get("name", f"–ö–ª—é—á {i}")
            message += f"{i}. {key_name}\n"
    
    keyboard = [
        [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="plans")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /plans command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
    
    # Skip test plan in regular plans view
    regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
    
    for plan_id, plan in regular_plans.items():
        discount = f" (—Å–∫–∏–¥–∫–∞ {plan.get('discount')})" if plan.get('discount') else ""
        message += (
            f"*{plan['name']}*{discount}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan['price']} —Ä—É–±.*\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {plan.get('devices', 1)}\n"
            f"{plan.get('description', '')}\n\n"
        )
    
    # Create keyboard with plan options
    keyboard = []
    for plan_id, plan in regular_plans.items():
        keyboard.append([InlineKeyboardButton(
            f"{plan['name']} - {plan['price']} —Ä—É–±.", 
            callback_data=f"buy_{plan_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /keys command"""
    user = update.effective_user
    await ensure_user_exists(user)
    
    # Get active subscription
    subscription = await get_active_subscription(user.id)
    
    if not subscription:
        # No active subscription
        message = (
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
        return
    
    # Get access keys for this user
    access_keys = await get_user_access_keys(user.id)
    
    # Get plan details
    plan_id = subscription.get("plan_id")
    plan = VPN_PLANS.get(plan_id, {})
    max_devices = plan.get("devices", 1)
    
    if not access_keys:
        message = (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_key")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
        return
    
    message = (
        f"*–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ ({len(access_keys)}/{max_devices}):*\n\n"
    )
    
    # Add access key information
    for i, key in enumerate(access_keys, 1):
        key_name = key.get("name", f"–ö–ª—é—á {i}")
        created_at = key.get("created_at")
        created_str = created_at.strftime("%d.%m.%Y") if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        key_id = key.get("key_id")
        
        message += f"{i}. *{key_name}*\n"
        message += f"   –°–æ–∑–¥–∞–Ω: {created_str}\n\n"
    
    # Create keyboard based on number of keys
    keyboard = []
    
    # Add individual key buttons
    for i, key in enumerate(access_keys, 1):
        key_id = key.get("key_id")
        keyboard.append([InlineKeyboardButton(f"üì≤ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª—é—á–∞ {i}", callback_data=f"show_key_{key_id}")])
    
    if len(access_keys) < max_devices:
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_key")])
    
    keyboard.append([InlineKeyboardButton("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data="help")])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command"""
    user = update.effective_user
    
    message = (
        "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN*\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ VPN —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n\n"
        "*1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline*\n"
        "‚Ä¢ [Android](https://play.google.com/store/apps/details?id=org.outline.android.client)\n"
        "‚Ä¢ [iOS](https://apps.apple.com/us/app/outline-app/id1356177741)\n"
        "‚Ä¢ [Windows](https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe)\n"
        "‚Ä¢ [macOS](https://s3.amazonaws.com/outline-releases/client/macos/stable/Outline-Client.dmg)\n"
        "‚Ä¢ [Linux](https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage)\n\n"
        "*2. –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∫–ª—é—á–∏¬ª\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª –∏–ª–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏¬ª\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞\n\n"
        "*3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN:*\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É VPN-–ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    keyboard = [
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/your_support_username")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# Callback Handlers

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = update.effective_user
    
    # Admin panel
    if data == "admin":
        if user.id not in ADMIN_IDS:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return
    
    # Main menu navigation
    elif data == "back_to_main":
        # Simulate /start command but edit message instead of sending new one
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
            f"–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É VPN —Å–µ—Ä–≤–∏—Å—É.\n\n"
            f"*–ß—Ç–æ —è —É–º–µ—é:*\n"
            f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
            f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        # Check if user has active subscription
        subscription = await get_active_subscription(user.id)
        
        # Prepare keyboard based on subscription status
        keyboard = []
        
        if subscription:
            # User has active subscription
            keyboard = [
                [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
                [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
            ]
        else:
            # User hasn't used test period yet
            db_user = await get_user(user.id)
            test_used = db_user.get("test_used", False) if db_user else False
            
            if not test_used:
                keyboard = [
                    [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="test_period")],
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="help")]
                ]
        
        # Add admin button if user is admin
        if user.id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Status callback
    elif data == "status":
        # Get active subscription
        subscription = await get_active_subscription(user.id)
        
        if not subscription:
            # No active subscription
            message = (
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        # Get plan details
        plan_id = subscription.get("plan_id")
        plan = VPN_PLANS.get(plan_id, {})
        
        # Get access keys for this subscription
        subscription_id = subscription.get("_id")
        access_keys = await get_user_access_keys(user.id)
        
        # Filter keys for current subscription
        valid_keys = [key for key in access_keys if str(key.get("subscription_id")) == str(subscription_id)]
        
        # Format expiry date
        expires_at = subscription.get("expires_at")
        expiry_str = format_expiry_date(expires_at) if expires_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        message = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n"
            f"*–ü–ª–∞–Ω:* {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"*–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiry_str}\n"
            f"*–î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {plan.get('devices', 1)}\n"
            f"*–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {len(valid_keys)}\n\n"
        )
        
        # Add access key information if available
        if valid_keys:
            message += "*–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:*\n\n"
            for i, key in enumerate(valid_keys, 1):
                key_name = key.get("name", f"–ö–ª—é—á {i}")
                message += f"{i}. {key_name}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Plans callback
    elif data == "plans":
        message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
        
        # Skip test plan in regular plans view
        regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
        
        for plan_id, plan in regular_plans.items():
            discount = f" (—Å–∫–∏–¥–∫–∞ {plan.get('discount')})" if plan.get('discount') else ""
            message += (
                f"*{plan['name']}*{discount}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan['price']} —Ä—É–±.*\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ {plan.get('devices', 1)}\n"
                f"{plan.get('description', '')}\n\n"
            )
        
        # Create keyboard with plan options
        keyboard = []
        for plan_id, plan in regular_plans.items():
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} - {plan['price']} —Ä—É–±.", 
                callback_data=f"buy_{plan_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Keys callback
    elif data == "keys":
        # Get active subscription
        subscription = await get_active_subscription(user.id)
        
        if not subscription:
            # No active subscription
            message = (
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        # Get access keys for this user
        access_keys = await get_user_access_keys(user.id)
        
        # Get plan details
        plan_id = subscription.get("plan_id")
        plan = VPN_PLANS.get(plan_id, {})
        max_devices = plan.get("devices", 1)
        
        if not access_keys:
            message = (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á:"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_key")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        message = (
            f"*–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ ({len(access_keys)}/{max_devices}):*\n\n"
        )
        
        # Add access key information
        for i, key in enumerate(access_keys, 1):
            key_name = key.get("name", f"–ö–ª—é—á {i}")
            created_at = key.get("created_at")
            created_str = created_at.strftime("%d.%m.%Y") if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            message += f"{i}. *{key_name}*\n"
            message += f"   –°–æ–∑–¥–∞–Ω: {created_str}\n"
            message += f"   [–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á](callback_data=show_key_{key.get('key_id')})\n\n"
        
        # Create keyboard based on number of keys
        keyboard = []
        
        for i, key in enumerate(access_keys, 1):
            keyboard.append([InlineKeyboardButton(
                f"–ö–ª—é—á {i}: {key.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}",
                callback_data=f"show_key_{key.get('key_id')}"
            )])
        
        if len(access_keys) < max_devices:
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_key")])
        
        keyboard.append([InlineKeyboardButton("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data="help")])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Help callback
    elif data == "help":
        message = (
            "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN*\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ VPN —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n\n"
            "*1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline*\n"
            "‚Ä¢ [Android](https://play.google.com/store/apps/details?id=org.outline.android.client)\n"
            "‚Ä¢ [iOS](https://apps.apple.com/us/app/outline-app/id1356177741)\n"
            "‚Ä¢ [Windows](https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe)\n"
            "‚Ä¢ [macOS](https://s3.amazonaws.com/outline-releases/client/macos/stable/Outline-Client.dmg)\n"
            "‚Ä¢ [Linux](https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage)\n\n"
            "*2. –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∫–ª—é—á–∏¬ª\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª –∏–ª–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏¬ª\n"
            "‚Ä¢ –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á¬ª, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞\n\n"
            "*3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN:*\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É VPN-–ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/your_support_username")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return
    
    # Test period
    elif data == "test_period":
        # Get user and check if test period already used
        db_user = await get_user(user.id)
        test_used = db_user.get("test_used", False) if db_user else False
        
        if test_used:
            message = (
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            return
        
        # Get test plan
        test_plan = VPN_PLANS.get("test")
        if not test_plan:
            await query.edit_message_text(
                "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        import uuid
        subscription_id = str(uuid.uuid4())
        
        # Create subscription
        subscription_data = {
            "user_id": user.id,
            "subscription_id": subscription_id,
            "plan_id": "test",
            "status": "active",
            "created_at": datetime.now(),
            "expires_at": datetime.now() + timedelta(days=test_plan["duration"]),
            "price_paid": 0
        }
        
        new_subscription = await create_subscription(subscription_data)
        
        if not new_subscription:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î)
        if isinstance(new_subscription, dict):
            # MongoDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            subscription_id = new_subscription.get("_id", subscription_id)
        else:
            # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç
            subscription_id = getattr(new_subscription, "id", subscription_id)
        
        # Create VPN access key
        key = await create_vpn_access(
            user.id, 
            subscription_id, 
            "test", 
            test_plan["duration"], 
            f"Test - {user.first_name}"
        )
        
        if not key:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Mark test period as used
        await update_user(user.id, {"test_used": True})
        
        # Send success message with access key
        message = (
            f"*–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ {test_plan['duration']} –¥–Ω—è.\n\n"
            f"*–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n"
            f"{key.get('access_url')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n"
            f"*–í–∞–∂–Ω–æ:* –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∫–ª—é—á–∏' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É –ø–æ–∑–∂–µ.\n\n"
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –¥–æ {format_expiry_date(new_subscription.get('expires_at'))}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="help")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Create key
    elif data.startswith("delete_key_"):
        # Extract key ID from callback data
        key_id = data.replace("delete_key_", "")
        
        # Get access key
        key = await get_access_key(key_id)
        
        if not key:
            await query.edit_message_text(
                "‚ö†Ô∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="keys")]
                ])
            )
            return
        
        try:
            # Delete key in Outline
            await outline_service.delete_key(key_id)
            
            # Update status in database
            await update_access_key(key_id, {"deleted": True, "deleted_at": datetime.now()})
            
            # Confirm deletion
            await query.edit_message_text(
                "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="keys")]
                ])
            )
        except Exception as e:
            logger.error(f"Error deleting key {key_id}: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="keys")]
                ])
            )
    
    elif data.startswith("show_key_"):
        # Extract key ID from callback data
        key_id = data.replace("show_key_", "")
        
        # Get access key
        key = await get_access_key(key_id)
        
        if not key:
            await query.edit_message_text(
                "‚ö†Ô∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="keys")]
                ])
            )
            return
        
        # Get key name and access URL
        key_name = key.get("name", "–ö–ª—é—á –±–µ–∑ –∏–º–µ–Ω–∏")
        access_url = key.get("access_url", "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        message = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:* {key_name}\n\n"
            f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n"
            f"`{access_url}`\n\n"
            f"–ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline.\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Outline –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."
        )
        
        # Create keyboard
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"delete_key_{key_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="keys")],
            [InlineKeyboardButton("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data="help")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
    elif data == "create_key":
        # Get active subscription
        subscription = await get_active_subscription(user.id)
        
        if not subscription:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans"),
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Get current keys and check limit
        access_keys = await get_user_access_keys(user.id)
        plan_id = subscription.get("plan_id")
        plan = VPN_PLANS.get(plan_id, {})
        max_devices = plan.get("devices", 1)
        
        if len(access_keys) >= max_devices:
            await query.edit_message_text(
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π ({max_devices}) –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.\n\n"
                f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –∫–ª—é—á–µ–π, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î)
        if isinstance(subscription, dict):
            # MongoDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            subscription_id = subscription.get("_id")
            expires_at = subscription.get("expires_at")
        else:
            # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç
            subscription_id = getattr(subscription, "id", None)
            expires_at = getattr(subscription, "expires_at", None)
        
        if not subscription_id:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
        remaining_days = 30  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
        if expires_at:
            if isinstance(expires_at, str):
                try:
                    expires_at = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
                except (ValueError, TypeError):
                    pass
            
            if isinstance(expires_at, datetime):
                delta = expires_at - datetime.now()
                remaining_days = max(delta.days, 1)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
            
        key_name = f"Device {len(access_keys) + 1} - {user.first_name}"
        key = await create_vpn_access(user.id, subscription_id, plan_id, remaining_days, key_name)
        
        if not key:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Send success message with access key
        message = (
            f"*–ù–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–Ω!*\n\n"
            f"*–ò–º—è:* {key.get('name')}\n"
            f"*–ö–ª—é—á:* `{key.get('access_url')}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n"
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –¥–æ {format_expiry_date(subscription.get('expires_at'))}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="help")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Show key details
    elif data.startswith("show_key_"):
        key_id = data.replace("show_key_", "")
        
        # Get key details
        key = await get_access_key(key_id)
        
        if not key:
            await query.edit_message_text(
                "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys"),
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Get subscription
        subscription_id = key.get("subscription_id")
        subscription = await get_subscription(subscription_id) if subscription_id else None
        
        # Format expiry date
        expires_at = subscription.get("expires_at") if subscription else None
        expiry_str = format_expiry_date(expires_at) if expires_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        message = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞*\n\n"
            f"*–ò–º—è:* {key.get('name')}\n"
            f"*–°–æ–∑–¥–∞–Ω:* {key.get('created_at').strftime('%d.%m.%Y') if key.get('created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiry_str}\n\n"
            f"*–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n`{key.get('access_url')}`\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="help")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Buy plan
    elif data.startswith("buy_"):
        plan_id = data.replace("buy_", "")
        plan = VPN_PLANS.get(plan_id)
        
        if not plan:
            await query.edit_message_text(
                "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans"),
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # For testing, since YooKassa integration not implemented yet
        # In production, this should generate a payment link
        # Create temporary fake payment and let user manually confirm it
        payment_id = f"test_payment_{plan_id}_{user.id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # Create subscription (inactive until payment confirmed)
        subscription_data = {
            "user_id": user.id,
            "plan_id": plan_id,
            "status": "pending",
            "created_at": datetime.now(),
            "expires_at": datetime.now() + timedelta(days=plan["duration"]),
            "price": plan["price"],
            "payment_id": payment_id
        }
        
        new_subscription = await create_subscription(subscription_data)
        
        if not new_subscription:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
            
        message = (
            f"*–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan['name']}*\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan['price']} —Ä—É–±.*\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
            f"–ú–∞–∫—Å–∏–º—É–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {plan.get('devices', 1)}\n\n"
            f"{plan.get('description', '')}\n\n"
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
            f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç—ã\n"
            f"2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            f"3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞¬ª\n\n"
        )
        
        # In a real implementation, use YooKassa to create a payment
        # and provide a proper URL here
        
        keyboard = [
            [InlineKeyboardButton("üí≤ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"payment_placeholder_{new_subscription['_id']}")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data=f"check_payment_{new_subscription['_id']}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Payment placeholder
    elif data.startswith("payment_placeholder_"):
        subscription_id = data.replace("payment_placeholder_", "")
        
        # Get subscription
        subscription = await get_subscription(subscription_id)
        
        if not subscription:
            await query.edit_message_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
            
        plan_id = subscription.get("plan_id")
        plan = VPN_PLANS.get(plan_id, {})
        
        # In a test implementation, automatically confirm payment
        # In production, this would redirect to YooKassa
        
        message = (
            f"*–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã*\n\n"
            f"–í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º.\n\n"
            f"–ü–ª–∞–Ω: *{plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{plan.get('price', 0)} —Ä—É–±.*\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º¬ª –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º", callback_data=f"simulate_payment_{subscription_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # Check payment status
    elif data.startswith("check_payment_"):
        subscription_id = data.replace("check_payment_", "")
        
        # Get subscription
        subscription = await get_subscription(subscription_id)
        
        if not subscription:
            await query.edit_message_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
            
        # Check payment status
        status = subscription.get("status")
        
        if status == "active":
            # Payment successful, show access keys
            await query.edit_message_text(
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        elif status == "pending":
            # Payment still pending
            await query.edit_message_text(
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data=f"check_payment_{subscription_id}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        else:
            # Payment failed or cancelled
            await query.edit_message_text(
                "–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="plans")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
            
    # Simulate payment (for testing)
    elif data.startswith("simulate_payment_"):
        subscription_id = data.replace("simulate_payment_", "")
        
        # Get subscription
        subscription = await get_subscription(subscription_id)
        
        if not subscription:
            await query.edit_message_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
            
        # Update subscription to active
        await update_subscription(subscription_id, {"status": "active"})
        
        # Get plan
        plan_id = subscription.get("plan_id")
        plan = VPN_PLANS.get(plan_id, {})
        
        # Create VPN access key
        key = await create_vpn_access(
            user.id, 
            subscription_id, 
            plan_id, 
            plan.get("duration", 30), 
            f"{plan.get('name', 'VPN')} - {user.first_name}"
        )
        
        if not key:
            await query.edit_message_text(
                "–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        # Send success message with access key
        message = (
            f"*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
            f"–ü–ª–∞–Ω: *{plan.get('name', 'VPN')}*\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {format_expiry_date(subscription.get('expires_at'))}\n\n"
            f"*–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*\n"
            f"`{key.get('access_url')}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ (–¥–æ {plan.get('devices', 1)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤) –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª—é—á–∏'."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="keys")],
            [InlineKeyboardButton("üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="help")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # If none of the above conditions match, return to main menu
    await query.edit_message_text(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]])
    )