import logging
import uuid
from datetime import datetime, timedelta
from time import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes

from config import VPN_PLANS, YUKASSA_SHOP_ID
from services.outline_service import OutlineService
import services.payment_service as payment_service
import services.database_service_sql as db
from utils.helpers import format_bytes, format_expiry_date, calculate_expiry

logger = logging.getLogger(__name__)
outline_service = OutlineService()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    # Check if user exists in database, if not, create them
    user = await db.get_user(user_id)
    is_new_user = not user
    if is_new_user:
        user = await db.create_user({
            "telegram_id": user_id,
            "username": username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            "created_at": datetime.now(),
            "is_premium": False
        })
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id}, username: {username}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="buy_test")
        ],
        [
            InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy"), 
            InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="status")
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"), 
            InlineKeyboardButton("üõ† –°–µ—Ä–≤–∏—Å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_new_user:
        message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            f"üÜî –í–∞—à ID: {user_id}\n\n"
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
    else:
        message = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}!\n\n"
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ "–±—É—Ä–≥–µ—Ä-–º–µ–Ω—é"
    commands = [
        ("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("status", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        ("plans", "–¢–∞—Ä–∏—Ñ—ã"),
        ("help", "–°–µ—Ä–≤–∏—Å")
    ]
    
    try:
        await context.bot.set_my_commands(commands)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(message, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ - –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if data == "buy_test":
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        if "test" in VPN_PLANS:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            plan_id = "test"
            plan = VPN_PLANS[plan_id]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–Ω–µ–µ
            user = await db.get_user(user_id)
            if user and user.test_used:
                await query.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–Ω–µ–µ")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="buy")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                
                await query.edit_message_text(
                    "‚ö†Ô∏è <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n\n"
                    "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–Ω–µ–µ.\n"
                    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_id = f"test_{user_id}_{int(time())}"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
                from handlers.outline_handlers import create_vpn_access, get_user_active_keys
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
                key = await create_vpn_access(
                    user_id=user_id,
                    subscription_id=subscription_id,
                    plan_id=plan_id,
                    days=plan["duration"],
                    name=f"Test {plan['duration']} days"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                await db.update_user(user_id, {"test_used": True})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if key:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É
                    keyboard = [
                        [InlineKeyboardButton(f"üîë –°–∫–∞—á–∞—Ç—å –∫–ª—é—á", url=key.access_url)],
                        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                    
                    await query.edit_message_text(
                        f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω—è\n"
                        f"üì± –ü–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {plan.get('devices', 1)}\n\n"
                        f"‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                        f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://getoutline.org/get-started/'>Outline VPN</a>\n"
                        f"2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞\n"
                        f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
                        f"–í–∞—à –∫–ª—é—á —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>.",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                        ]])
                    )
            except Exception as e:
                logger.error(f"Error creating test period: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                    ]])
                )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if data == "back_to_main":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="buy_test")
            ],
            [
                InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy"), 
                InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="status")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"), 
                InlineKeyboardButton("üõ† –°–µ—Ä–≤–∏—Å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {query.from_user.first_name}!\n\n"
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"
    elif data == "info":
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
        plans_info = ""
        for plan_id, plan in VPN_PLANS.items():
            days = plan.get("days", 0)
            price = plan.get("price", 0)
            
            if plan_id == "test":
                plans_info += f"üìå *–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥*: {days} –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            else:
                plans_info += f"üìå *{plan.get('name', '–ü–ª–∞–Ω')}*: {days} –¥–Ω–µ–π –∑–∞ {price} ‚ÇΩ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="buy_test")],
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö*\n\n"
            f"{plans_info}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥'.\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'.\n\n"
            "–ù–∞—à VPN —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n"
            "‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "‚úÖ –í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫—É –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "‚úÖ –ü—Ä–æ—Å—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ—Ä–≤–∏—Å"
    elif data == "help":
        with open('help_command.txt', 'r', encoding='utf-8') as file:
            help_text = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
    elif data.startswith("copy_key_"):
        callback_id = query.data
        access_url = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if hasattr(context, 'user_data') and callback_id in context.user_data:
            access_url = context.user_data[callback_id]
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if access_url:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
            await query.answer("–ö–ª—é—á –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"\`{access_url}\`",
                parse_mode="Markdown"
            )
            return
        else:
            await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.")
            return
    
    if data == "buy":
        # Show available plans
        keyboard = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ)
        regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
        sorted_plans = sorted(regular_plans.items(), key=lambda x: x[1]['duration'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for plan_id, plan in sorted_plans:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            discount_text = f" (-{plan.get('discount')})" if plan.get('discount') else ""
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} ({plan['duration']} –¥–Ω–µ–π) - {plan['price']} ‚ÇΩ{discount_text}",
                callback_data=f"buy_{plan_id}"
            )])
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —Ç–µ–ø–µ—Ä—å –≤—ã–Ω–æ—Å–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        
        # Add back button
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É VPN.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    
    # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif data == "status":
        user_id = query.from_user.id
        user = await db.get_user(user_id)
        
        try:
            # Get active subscription
            active_subscription = await db.get_active_subscription(user_id)
            
            # Get user's VPN keys
            from handlers.outline_handlers import get_user_active_keys
            active_keys = await get_user_active_keys(user_id)
            
            if active_subscription:
                # User has an active subscription
                plan_id = active_subscription.plan_id
                plan = VPN_PLANS.get(plan_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "devices": 0})
                
                # Format expiry date
                expiry_date = active_subscription.expires_at
                days_left = (expiry_date - datetime.now()).days if expiry_date else 0
                
                # Create inline keyboard with keys
                keyboard = []
                
                # Add keys
                if active_keys and len(active_keys) > 0:
                    for i, key in enumerate(active_keys):
                        key_name = key.name or f"–ö–ª—é—á {i+1}"
                        
                        # Save access URL in context for later retrieval
                        key_id = f"copy_key_{key.id}"
                        if not hasattr(context, 'user_data'):
                            context.user_data = {}
                        context.user_data[key_id] = key.access_url
                        
                        keyboard.append([InlineKeyboardButton(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å {key_name}", callback_data=key_id)])
                
                # Add renewal option if subscription is about to expire
                if days_left <= 7:
                    keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")])
                
                # Add back button
                keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                status_text = (
                    "‚úÖ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                    f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                    f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                    f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞\n"
                    f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date.strftime('%d.%m.%Y')}\n"
                    f"‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(active_keys)} –∏–∑ {plan['devices']}\n\n"
                )
                
                if active_keys and len(active_keys) > 0:
                    status_text += "üîë <b>–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
                    status_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á."
                else:
                    status_text += "‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                
                await query.edit_message_text(
                    status_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                # User has no active subscription
                keyboard = [
                    [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                
                if "test" in VPN_PLANS and not (user and getattr(user, 'test_used', False)):
                    keyboard.insert(0, [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="buy_test")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É "
                    "–∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"Error getting user status: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    elif data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
            [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîë VPN Bot –ú–µ–Ω—é:",
            reply_markup=reply_markup
        )

async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for buy plan buttons"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("buy_"):
        plan_id = data.replace("buy_", "")
        
        if plan_id in VPN_PLANS:
            plan = VPN_PLANS[plan_id]
            
            # Get user from database
            user_id = query.from_user.id
            user = await db.get_user(user_id)
            
            # Check if user has already used test plan
            if plan_id == "test" and user and getattr(user, 'test_used', False):
                await query.edit_message_text(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy")
                    ]])
                )
                return
            
            # Show confirmation before payment
            devices_text = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ {plan.get('devices', 1)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            discount_text = f", —Å–∫–∏–¥–∫–∞ {plan.get('discount')}" if plan.get('discount') else ""
            
            # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
            if plan_id == "test":
                keyboard = [
                    [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data=f"pay_{plan_id}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")]
                ]
                button_text = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                title = "üìù <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>"
            else:
                keyboard = [
                    [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"pay_{plan_id}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")]
                ]
                button_text = "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                title = "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>"
                
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"{title}\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                f"üì± {devices_text}{discount_text}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']} ‚ÇΩ\n\n"
                f"{button_text}",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")
                ]])
            )

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for payment button"""
    query = update.callback_query
    
    data = query.data
    if data.startswith("pay_"):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.answer("–°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç—É–ø...")
        
        plan_id = data.replace("pay_", "")
        user_id = query.from_user.id
        logger.info(f"üî∂ PAYMENT HANDLER: Processing payment for user_id={user_id}, plan_id={plan_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
            if plan_id not in VPN_PLANS:
                raise ValueError(f"Invalid plan ID: {plan_id}")
            
            plan = VPN_PLANS[plan_id]
            logger.info(f"üî∂ PAYMENT HANDLER: Selected plan: {plan['name']}, price: {plan.get('price', 0)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            logger.info(f"üî∂ PAYMENT HANDLER: –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–ª–∞–Ω {plan_id}")
            payment_result = await payment_service.create_payment(
                user_id=user_id,
                plan_id=plan_id,
                return_url="https://t.me/vpn_outline_manager_bot"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            
            context.user_data['current_payment'] = {
                'payment_id': payment_result['id'],
                'subscription_id': payment_result.get('subscription_id'),
                'plan_id': plan_id
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
            if payment_result.get('is_test', False) or plan_id == "test" or plan.get('price', 0) <= 0:
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
                from handlers.outline_handlers import create_vpn_access
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await db.get_user(user_id)
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
                if not getattr(user, 'test_used', False) and plan_id == "test":
                    await db.update_user(user_id, {"test_used": True})
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üî∂ PAYMENT HANDLER: Deactivating previous access keys for user {user.id}")
                await db.deactivate_user_access_keys(user.id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
                device_limit = plan.get('devices', 1)
                success_keys = []
                
                for i in range(device_limit):
                    device_name = f"Device {i+1}" if i > 0 else "Main device"
                    key_name = f"{user.username or f'User_{user_id}'} - {device_name}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
                    subscription = await db.get_subscription(payment_result['subscription_id'])
                    if not subscription:
                        logger.error(f"Failed to get subscription with ID {payment_result['subscription_id']}")
                        continue

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–¥–ø–∏—Å–∫–∏ (—á–∏—Å–ª–æ–≤–æ–π)
                    db_subscription_id = subscription.id
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
                    db_user = await db.get_user(user_id)
                    if not db_user:
                        logger.error(f"Failed to get user with telegram_id {user_id}")
                        continue
                        
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–æ–π)
                    db_user_id = db_user.id
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ ID
                    key = await create_vpn_access(
                        user_id=db_user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        subscription_id=db_subscription_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–¥–ø–∏—Å–∫–∏
                        plan_id=plan_id,
                        days=plan['duration'],
                        name=key_name
                    )
                    
                    if key:
                        success_keys.append(key)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if success_keys:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–∞–º
                    keyboard = []
                    for key in success_keys:
                        keyboard.append([InlineKeyboardButton(f"üîë –°–∫–∞—á–∞—Ç—å –∫–ª—é—á: {key.name}", url=key.access_url)])
                    
                    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
                    
                    plan_type = "–¢–µ—Å—Ç–æ–≤—ã–π" if plan_id == "test" else "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if plan.get('price', 0) <= 0 else ""
                    
                    await query.edit_message_text(
                        f"‚úÖ <b>{plan_type} –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                        f"üì± –ü–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {plan.get('devices', 1)}\n\n"
                        f"‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                        f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://getoutline.org/get-started/'>Outline VPN</a>\n"
                        f"2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞\n"
                        f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                        ]])
                    )
                return
                
            # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_result['confirmation_url'])],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                f"üí∞ –°—É–º–º–∞: {plan['price']} ‚ÇΩ\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'\n"
                "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –ÆKassa\n"
                "3Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                "    –∏ –∫–ª—é—á –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
                "‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Payment creation error: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ check_ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ–±—Ö—É–∫–∏
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /status command"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(user_id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        user = await db.create_user({
            "telegram_id": user_id,
            "username": update.effective_user.username or f"user_{user_id}",
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            "created_at": datetime.now(),
            "is_premium": False
        })
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {user_id}")
    
    # Create and trigger the –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç button handler
    keyboard = [[InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="status")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(
        f"üÜî –í–∞—à ID: {user_id}\n\n"
        "üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...",
        reply_markup=reply_markup
    )

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /plans command"""
    # Create and trigger the buy button handler
    keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(
        "üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command"""
    with open('help_command.txt', 'r', encoding='utf-8') as file:
        help_text = file.read()
    
    # Create keyboard with return button
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
