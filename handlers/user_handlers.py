import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes
from bson import ObjectId

from config import VPN_PLANS, YUKASSA_SHOP_ID
from services.outline_service import OutlineService
from services.payment_service import create_payment, check_payment
from services.database_service import (
    get_user,
    create_user,
    update_user,
    create_subscription,
    update_subscription,
    get_user_subscriptions,
    get_active_subscription,
    get_user_access_keys,
    create_access_key,
    get_access_key
)
from utils.helpers import format_bytes, format_expiry_date

logger = logging.getLogger(__name__)
outline_service = OutlineService()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    # Check if user exists in database, if not, create them
    user = await get_user(user_id)
    if not user:
        await create_user({
            "telegram_id": user_id,
            "username": username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            "created_at": datetime.now(),
            "is_admin": False
        })
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
        [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "buy":
        # Show available plans
        keyboard = []
        for plan_id, plan in VPN_PLANS.items():
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} - {plan['price']} ‚ÇΩ", 
                callback_data=f"buy_{plan_id}"
            )])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
            "üîπ <b>–ë–∞–∑–æ–≤—ã–π</b>: 10 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 299 ‚ÇΩ\n"
            "üîπ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>: 50 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 599 ‚ÇΩ\n"
            "üîπ <b>–ü—Ä–µ–º–∏—É–º</b>: 100 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 999 ‚ÇΩ",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
    elif query.data == "status":
        user_id = query.from_user.id
        user = await get_user(user_id)
        
        if not user or not user.get("marzban_username"):
            keyboard = [
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VPN.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=reply_markup
            )
            return
        
        try:
            # Get user's active subscription
            active_subscription = await get_active_subscription(user_id)
            
            if active_subscription:
                # Get subscription plan
                plan_id = active_subscription.get("plan_id", "unknown")
                plan = VPN_PLANS.get(plan_id, {})
                
                # Format expiry date
                expiry_timestamp = active_subscription.get("expires_at", 0)
                expiry = format_expiry_date(expiry_timestamp)
                
                # Get access keys
                access_keys = await get_user_access_keys(user_id)
                
                # Get all keys from Outline API to get usage data
                outline_keys = await outline_service.get_keys()
                
                # Calculate traffic usage
                total_traffic = 0
                for key in access_keys:
                    key_id = key.get("key_id")
                    # Check if key exists in outline_keys (metrics data)
                    for outline_key in outline_keys.get("keys", []):
                        if str(outline_key.get("id")) == str(key_id):
                            # Add usage data
                            total_traffic += outline_key.get("metrics", {}).get("bytesTransferred", 0)
                
                # Format used data
                used = format_bytes(total_traffic)
                
                # Get user status
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if active_subscription.get("status") == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                message_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                message_text += f"üîë –ü–ª–∞–Ω: {plan.get('name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n"
                message_text += f"üîã –°—Ç–∞—Ç—É—Å: {status}\n"
                message_text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {used}\n"
                message_text += f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n\n"
                
                # Add config links if there are any keys
                if access_keys:
                    message_text += "üîê <b>–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n\n"
                    for i, key in enumerate(access_keys[:2], 1):  # Limit to 2 keys to avoid message too long
                        key_name = key.get("name", f"–ö–ª—é—á {i}")
                        message_text += f"{i}. <b>{key_name}</b>:\n"
                        message_text += f"<code>{key.get('access_url')}</code>\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                    [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]])
                )
        except Exception as e:
            logger.error(f"Error getting user status: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
            [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîë VPN Bot –ú–µ–Ω—é:",
            reply_markup=reply_markup
        )

async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for buy plan buttons"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("buy_"):
        plan_id = data.replace("buy_", "")
        
        if plan_id in VPN_PLANS:
            plan = VPN_PLANS[plan_id]
            
            # Create order in database
            user_id = query.from_user.id
            order_id = await create_order({
                "telegram_id": user_id,
                "plan_id": plan_id,
                "amount": plan["price"],
                "status": "pending",
                "created_at": datetime.now()
            })
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω</b>\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                f"üíæ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(plan['data_limit'])}\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                f"üí∞ –°—É–º–º–∞: {plan['price']} ‚ÇΩ\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")
                ]])
            )

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for payment button"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("pay_"):
        order_id = data.replace("pay_", "")
        user_id = query.from_user.id
        
        try:
            # Start the payment process with –ÆKassa
            payment_url = await create_payment(order_id, str(user_id))
            
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_{order_id}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Payment error: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    elif data.startswith("check_"):
        order_id = data.replace("check_", "")
        
        try:
            # Check payment status
            is_paid = await check_payment(order_id)
            
            if is_paid:
                # Process the order
                user_id = query.from_user.id
                user = await get_user(user_id)
                
                # Get order details
                from services.database_service import get_order
                order = await get_order(ObjectId(order_id))
                plan_id = order.get("plan_id")
                plan = VPN_PLANS[plan_id]
                
                marzban_username = user.get("marzban_username")
                
                # Check if user already has an account in Marzban
                if marzban_username:
                    # Update existing user
                    await marzban_service.update_user(
                        marzban_username,
                        data_limit=plan['data_limit'],
                        days=plan['duration']
                    )
                else:
                    # Create new user in Marzban
                    marzban_username = f"tg_{user_id}"
                    await marzban_service.create_user(
                        marzban_username,
                        data_limit=plan['data_limit'],
                        days=plan['duration']
                    )
                    
                    # Update user in database with Marzban username
                    await update_user(user_id, {"marzban_username": marzban_username})
                
                # Update order status
                await update_order(ObjectId(order_id), {
                    "status": "completed",
                    "completed_at": datetime.now()
                })
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                    f"üíæ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(plan['data_limit'])}\n"
                    f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n\n"
                    f"üë§ –õ–æ–≥–∏–Ω: <code>{marzban_username}</code>\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_{order_id}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n"
                    "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞'.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Payment check error: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /status command"""
    user_id = update.effective_user.id
    user = await get_user(user_id)
    
    if not user or not user.get("marzban_username"):
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VPN.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=reply_markup
        )
        return
    
    try:
        # Get user account info from Marzban
        marzban_username = user.get("marzban_username")
        user_info = await marzban_service.get_user(marzban_username)
        
        if user_info:
            # Format used data
            used = format_bytes(user_info.get("used_traffic", 0))
            data_limit = format_bytes(user_info.get("data_limit", 0))
            
            # Format expiration date
            expiry = format_expiry_date(user_info.get("expire", 0))
            
            # Get user status
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user_info.get("status") == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: <code>{marzban_username}</code>\n"
                f"üîã –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìà –¢—Ä–∞—Ñ–∏–∫: {used} –∏–∑ {data_limit}\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        logger.error(f"Error getting user status: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /plans command"""
    keyboard = []
    for plan_id, plan in VPN_PLANS.items():
        keyboard.append([InlineKeyboardButton(
            f"{plan['name']} - {plan['price']} ‚ÇΩ", 
            callback_data=f"buy_{plan_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n\n"
        "üîπ <b>–ë–∞–∑–æ–≤—ã–π</b>: 10 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 299 ‚ÇΩ\n"
        "üîπ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>: 50 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 599 ‚ÇΩ\n"
        "üîπ <b>–ü—Ä–µ–º–∏—É–º</b>: 100 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 999 ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for pre-checkout queries"""
    query = update.pre_checkout_query
    
    # This is only used with native Telegram payments, which we're not using
    # But keeping it here for future reference
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for successful payments"""
    # This is only used with native Telegram payments, which we're not using
    # But keeping it here for future reference
    payment_info = update.message.successful_payment
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command"""
    await update.message.reply_text(
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "/plans - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="HTML"
    )
