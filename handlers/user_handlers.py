import logging
import uuid
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes

from config import VPN_PLANS, YUKASSA_SHOP_ID
from services.outline_service import OutlineService
import services.payment_service as payment_service
import services.database_service_sql as db
from utils.helpers import format_bytes, format_expiry_date, calculate_expiry

logger = logging.getLogger(__name__)
outline_service = OutlineService()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    # Check if user exists in database, if not, create them
    user = await get_user(user_id)
    if not user:
        await create_user({
            "telegram_id": user_id,
            "username": username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            "created_at": datetime.now(),
            "is_admin": False
        })
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
        [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
    if query.data.startswith("copy_key_"):
        callback_id = query.data
        access_url = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if hasattr(context, 'user_data') and callback_id in context.user_data:
            access_url = context.user_data[callback_id]
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if access_url:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
            await query.answer("–ö–ª—é—á –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"`{access_url}`",
                parse_mode="Markdown"
            )
            return
        else:
            await query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.")
            return
    
    if query.data == "buy":
        # Show available plans
        keyboard = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ)
        regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
        sorted_plans = sorted(regular_plans.items(), key=lambda x: x[1]['duration'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for plan_id, plan in sorted_plans:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            discount_text = f" (-{plan.get('discount')})" if plan.get('discount') else ""
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} - {plan['price']} ‚ÇΩ{discount_text}", 
                callback_data=f"buy_{plan_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        plans_text = "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
        regular_plans = {k: v for k, v in VPN_PLANS.items() if k != "test"}
        for plan_id, plan in regular_plans.items():
            discount = f" (—Å–∫–∏–¥–∫–∞ {plan.get('discount')})" if plan.get('discount') else ""
            plans_text += (
                f"üîπ <b>{plan['name']}</b>{discount}: {plan['price']} ‚ÇΩ\n"
                f"   ‚îî {plan['duration']} –¥–Ω–µ–π, –¥–æ {plan.get('devices', 1)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            )
        
        await query.edit_message_text(
            plans_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
    elif query.data == "status":
        user_id = query.from_user.id
        user = await get_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_subscription = await get_active_subscription(user_id)
        if not user or not active_subscription:
            keyboard = [
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VPN.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=reply_markup
            )
            return
        
        try:
            # Get user's active subscription
            active_subscription = await get_active_subscription(user_id)
            
            if active_subscription:
                # Get subscription plan
                plan_id = active_subscription.get("plan_id", "unknown")
                plan = VPN_PLANS.get(plan_id, {})
                
                # Format expiry date
                expiry_timestamp = active_subscription.get("expires_at", 0)
                expiry = format_expiry_date(expiry_timestamp)
                
                # Get access keys
                access_keys = await get_user_access_keys(user_id)
                
                # Get all keys from Outline API to get usage data
                outline_keys = await outline_service.get_keys()
                
                # Calculate traffic usage
                total_traffic = 0
                for key in access_keys:
                    key_id = key.get("key_id")
                    # Check if key exists in outline_keys (metrics data)
                    for outline_key in outline_keys.get("keys", []):
                        if str(outline_key.get("id")) == str(key_id):
                            # Add usage data
                            total_traffic += outline_key.get("metrics", {}).get("bytesTransferred", 0)
                
                # Format used data
                used = format_bytes(total_traffic)
                
                # Get user status
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if active_subscription.get("status") == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                message_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                message_text += f"üîë –ü–ª–∞–Ω: {plan.get('name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n"
                message_text += f"üîã –°—Ç–∞—Ç—É—Å: {status}\n"
                message_text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {used}\n"
                message_text += f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                    [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
                ]
                
                # Add config links if there are any keys
                if access_keys:
                    message_text += "üîê <b>–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n\n"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    if not hasattr(context, 'user_data'):
                        context.user_data = {}
                        
                    for i, key in enumerate(access_keys[:2], 1):  # Limit to 2 keys to avoid message too long
                        key_name = key.get("name", f"–ö–ª—é—á {i}")
                        access_url = key.get('access_url')
                        message_text += f"{i}. <b>{key_name}</b>:\n"
                        message_text += f"<code>{access_url}</code>\n\n"
                        
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                        copy_key_callback = f"copy_key_{uuid.uuid4().hex[:8]}"
                        context.user_data[copy_key_callback] = access_url
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
                        keyboard.append([
                            InlineKeyboardButton(f"üíæ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á {i}", callback_data=copy_key_callback)
                        ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]])
                )
        except Exception as e:
            logger.error(f"Error getting user status: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")],
            [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîë VPN Bot –ú–µ–Ω—é:",
            reply_markup=reply_markup
        )

async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for buy plan buttons"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("buy_"):
        plan_id = data.replace("buy_", "")
        
        if plan_id in VPN_PLANS:
            plan = VPN_PLANS[plan_id]
            
            # Get user from database
            user_id = query.from_user.id
            user = await db.get_user(user_id)
            
            # Check if user has already used test plan
            if plan_id == "test" and user and user.test_used:
                await query.edit_message_text(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy")
                    ]])
                )
                return
            
            # Show confirmation before payment
            devices_text = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ {plan.get('devices', 1)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            discount_text = f", —Å–∫–∏–¥–∫–∞ {plan.get('discount')}" if plan.get('discount') else ""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"pay_{plan_id}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                f"üì± {devices_text}{discount_text}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']} ‚ÇΩ\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy")
                ]])
            )

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for payment button"""
    query = update.callback_query
    
    data = query.data
    if data.startswith("pay_"):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.answer("–°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂...")
        
        plan_id = data.replace("pay_", "")
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
            if plan_id not in VPN_PLANS:
                raise ValueError(f"Invalid plan ID: {plan_id}")
            
            plan = VPN_PLANS[plan_id]
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            payment_result = await payment_service.create_payment(
                user_id=user_id,
                plan_id=plan_id,
                return_url="https://t.me/vpn_outline_manager_bot"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            
            context.user_data['current_payment'] = {
                'payment_id': payment_result['id'],
                'subscription_id': payment_result.get('subscription_id'),
                'plan_id': plan_id
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂
            if payment_result.get('is_test', False) or plan_id == "test":
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
                from handlers.outline_handlers import create_vpn_access
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await db.get_user(user_id)
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
                if not user.test_used and plan_id == "test":
                    await db.update_user(user_id, {"test_used": True})
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
                device_limit = plan.get('devices', 1)
                success_keys = []
                
                for i in range(device_limit):
                    device_name = f"Device {i+1}" if i > 0 else "Main device"
                    key_name = f"{user.username or f'User_{user_id}'} - {device_name}"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
                    key = await create_vpn_access(
                        user_id=user_id,
                        subscription_id=payment_result['subscription_id'],
                        plan_id=plan_id,
                        days=plan['duration'],
                        name=key_name
                    )
                    
                    if key:
                        success_keys.append(key)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if success_keys:
                    await query.edit_message_text(
                        f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n"
                        f"üì± –°–æ–∑–¥–∞–Ω–æ –∫–ª—é—á–µ–π: {len(success_keys)}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–ª—é—á–∏", callback_data="status")
                        ]]),
                        parse_mode="HTML"
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                        ]])
                    )
                return
                
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_result['confirmation_url'])],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_{payment_result['id']}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                f"üí∞ –°—É–º–º–∞: {plan['price']} ‚ÇΩ\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'\n"
                "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –ÆKassa\n"
                "3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Payment creation error: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    elif data.startswith("check_"):
        payment_id = data.replace("check_", "")
        
        try:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment_status = await payment_service.check_payment_status(payment_id)
            
            if payment_status == "succeeded" or payment_status == "waiting_for_capture":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                payment_result = await payment_service.process_payment(payment_id)
                
                if payment_result:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞—Ç–µ–∂–∞
                    user_id = query.from_user.id
                    user = await db.get_user(user_id)
                    payment = await db.get_payment(payment_id)
                    
                    if not payment:
                        raise ValueError(f"Payment {payment_id} not found")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∫—É
                    subscription = await db.get_subscription(payment.subscription_id)
                    if not subscription:
                        raise ValueError(f"Subscription {payment.subscription_id} not found")
                        
                    plan_id = subscription.plan_id
                    plan = VPN_PLANS.get(plan_id)
                    if not plan:
                        raise ValueError(f"Plan {plan_id} not found")
                
                # Create subscription in database
                from datetime import datetime, timedelta
                from utils.helpers import calculate_expiry
                from handlers.outline_handlers import create_vpn_access, extend_vpn_access, get_user_active_keys
                
                # Set subscription period
                expires_at = calculate_expiry(plan['duration'])
                
                # Create or update subscription
                subscription_data = {
                    "user_id": user_id,
                    "plan_id": plan_id,
                    "status": "active",
                    "created_at": datetime.now(),
                    "expires_at": expires_at,
                    "order_id": order_id
                }
                
                subscription_id = await create_subscription(subscription_data)
                
                # Check if user has active keys we can extend
                active_keys = await get_user_active_keys(user_id)
                device_limit = plan.get('devices', 1)
                
                # If user has existing keys from test period, extend them instead of creating new ones
                if active_keys and len(active_keys) > 0:
                    # Extend existing keys up to the device limit
                    keys_extended = 0
                    for key in active_keys:
                        if keys_extended >= device_limit:
                            break
                            
                        # Get base name for the key
                        device_name = f"Device {keys_extended+1}" if keys_extended > 0 else "Main device"
                        key_name = f"{user.get('username', f'User_{user_id}')} - {device_name}"
                        
                        # Extend this key
                        updated_key = await extend_vpn_access(
                            key_id=key.get("key_id"),
                            user_id=user_id,
                            subscription_id=str(subscription_id),
                            plan_id=plan_id,
                            days=plan['duration'],
                            name=key_name
                        )
                        
                        if updated_key:
                            keys_extended += 1
                    
                    # If we need more keys than we extended, create new ones
                    for i in range(keys_extended, device_limit):
                        device_name = f"Device {i+1}" if i > 0 else "Main device"
                        key_name = f"{user.get('username', f'User_{user_id}')} - {device_name}"
                        
                        # Create new key
                        await create_vpn_access(
                            user_id=user_id,
                            subscription_id=str(subscription_id),
                            plan_id=plan_id,
                            days=plan['duration'],
                            name=key_name
                        )
                
                else:
                    # User has no existing keys, create new ones
                    for i in range(device_limit):
                        device_name = f"Device {i+1}" if i > 0 else "Main device"
                        key_name = f"{user.get('username', f'User_{user_id}')} - {device_name}"
                        
                        # Create new key
                        await create_vpn_access(
                            user_id=user_id,
                            subscription_id=str(subscription_id),
                            plan_id=plan_id,
                            days=plan['duration'],
                            name=key_name
                        )
                
                # Update user in database with subscription status
                await update_user(user_id, {"has_active_subscription": True})
                
                # Update order status
                await update_order(ObjectId(order_id), {
                    "status": "completed",
                    "completed_at": datetime.now()
                })
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üîπ –¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
                    f"üíæ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(plan['data_limit'])}\n"
                    f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n\n"
                    f"üë§ Telegram ID: <code>{user_id}</code>\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /keys",
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_{order_id}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n"
                    "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞'.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Payment check error: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /status command"""
    user_id = update.effective_user.id
    user = await get_user(user_id)
    
    # Check if user has active subscription
    active_subscription = await get_active_subscription(user_id)
    if not active_subscription:
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ VPN.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=reply_markup
        )
        return
    
    try:
        # Get subscription info and access keys
        access_keys = await get_user_access_keys(user_id)
        
        # Get all keys from Outline API for usage info
        outline_keys = await outline_service.get_keys()
        
        # Calculate total traffic
        total_traffic = 0
        for key in access_keys:
            key_id = key.get("key_id")
            # Check if key exists in outline_keys (metrics data)
            for outline_key in outline_keys.get("keys", []):
                if str(outline_key.get("id")) == str(key_id):
                    # Add usage data
                    total_traffic += outline_key.get("metrics", {}).get("bytesTransferred", 0)
        
        # Get subscription plan info
        plan_id = active_subscription.get("plan_id", "unknown")
        plan = VPN_PLANS.get(plan_id, {})
        
        # Format used data
        used = format_bytes(total_traffic)
        
        # Format expiration date
        expiry = format_expiry_date(active_subscription.get("expires_at", 0))
        
        # Get subscription status
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if active_subscription.get("status") == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        active_keys_count = len(access_keys)
        max_devices = plan.get("devices", 1)
        
        # –ü–æ–ª—É—á–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        key_urls = []
        for key in access_keys:
            if "access_url" in key:
                key_urls.append(key.get("access_url"))
        
        message = f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n" \
                 f"üöÄ –ü–ª–∞–Ω: {plan.get('name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n" \
                 f"üîã –°—Ç–∞—Ç—É—Å: {status}\n" \
                 f"üìà –¢—Ä–∞—Ñ–∏–∫: {used}\n" \
                 f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {active_keys_count} –∏–∑ {max_devices}\n" \
                 f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]
        ]
        
        # –î–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if key_urls:
            message += "<b>–í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if not hasattr(context, 'user_data'):
                context.user_data = {}
                
            for i, url in enumerate(key_urls, 1):
                message += f"{i}. <code>{url}</code>\n"
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                copy_key_callback = f"copy_key_{uuid.uuid4().hex[:8]}"
                context.user_data[copy_key_callback] = url
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
                keyboard.append([
                    InlineKeyboardButton(f"üíæ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á {i}", callback_data=copy_key_callback)
                ])
        else:
            message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /keys –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è."
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = InlineKeyboardMarkup(keyboard)
            
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error getting subscription status: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /plans command"""
    keyboard = []
    for plan_id, plan in VPN_PLANS.items():
        keyboard.append([InlineKeyboardButton(
            f"{plan['name']} - {plan['price']} ‚ÇΩ", 
            callback_data=f"buy_{plan_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n\n"
        "üîπ <b>–ë–∞–∑–æ–≤—ã–π</b>: 10 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 299 ‚ÇΩ\n"
        "üîπ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>: 50 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 599 ‚ÇΩ\n"
        "üîπ <b>–ü—Ä–µ–º–∏—É–º</b>: 100 –ì–ë –Ω–∞ 30 –¥–Ω–µ–π - 999 ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for pre-checkout queries"""
    query = update.pre_checkout_query
    
    # This is only used with native Telegram payments, which we're not using
    # But keeping it here for future reference
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for successful payments"""
    # This is only used with native Telegram payments, which we're not using
    # But keeping it here for future reference
    payment_info = update.message.successful_payment
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command"""
    await update.message.reply_text(
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "/plans - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="HTML"
    )
